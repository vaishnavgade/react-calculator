{"version":3,"sources":["index.js"],"names":["listOfOperations","Key","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Calculator","_this","Object","_Users_sri_Desktop_github_react_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_sri_Desktop_github_react_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_sri_Desktop_github_react_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","numbers","operations","isOperation","handleClick","bind","_Users_sri_Desktop_github_react_calculator_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","handleChange","handleSumbit","includes","slice","push","setState","numbersArr","length","String","concat","console","log","result","parseInt","newNumbers","calculateResult","storeInput","event","userInput","target","lastValue","charAt","preventDefault","_this2","onSubmit","type","onChange","renderKey","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4611fec1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst equalityChar = '=';\nconst resetChar = \"AC\";\nconst listOfOperations = [ resetChar, \"%\",  \"/\", \"*\", \"-\", \"+\", equalityChar];\n\nfunction Key(props){\n    return (\n        <button className={props.className} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Calculator extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value:\"\",\n            numbers:[],\n            operations:[],\n            isOperation: false,\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSumbit = this.handleSumbit.bind(this);\n    }\n\n    storeInput(value){\n        // check if last entered character is an operation\n        if(!listOfOperations.includes(value)){\n            if(!this.state.isOperation){\n                let numbersArr = this.state.numbers.slice();\n                // modify the last element with user input\n                if(numbersArr.length === 0){\n                    numbersArr.push(value);\n                }\n                else{\n                    numbersArr[numbersArr.length - 1]\n                        = String(numbersArr[numbersArr.length - 1]).concat(value);\n                    console.log(numbersArr);\n                }\n\n                this.setState({\n                    numbers: numbersArr,\n                });\n            }\n            else if(this.state.isOperation){\n                // when we encounter an operation symbol, push to the last instead of modifying the last element\n                // reset isOperation flag\n                let numbersArr = this.state.numbers.slice();\n                numbersArr.push(value);\n                this.setState({\n                    numbers: numbersArr,\n                    isOperation: false,\n                })\n            }\n        }\n        else if(listOfOperations.includes(value)){\n            // Avoid adding operators when we just added one\n            if(!this.state.isOperation){\n                const operations = this.state.operations.slice();\n                operations.push(value);\n                this.setState({\n                    operations: operations,\n                    isOperation: true,\n                });\n            }\n        } \n    }\n\n    calculateResult(){\n        const numbersArr = this.state.numbers.slice();\n        const operationsArr = this.state.operations.slice();\n        let result = 0;\n        switch(operationsArr[0]){\n            case '+':\n                result = parseInt(numbersArr[0]) + parseInt(numbersArr[1]);\n                break;\n            case '-':\n                result = parseInt(numbersArr[0]) - parseInt(numbersArr[1]);\n                break;\n            case '/':\n                result = parseInt(numbersArr[0]) / parseInt(numbersArr[1]);\n                break;\n            case '*':\n                result = parseInt(numbersArr[0]) * parseInt(numbersArr[1]);\n                break;\n            case '%':\n                result = parseInt(numbersArr[0]) % parseInt(numbersArr[1]);\n                break;\n            default:\n                result = 0;\n                break;\n        }\n        \n        // Display result, clear numbers and push result for further operations\n        // clear operations and reset isOperation flag\n        const newNumbers = [result];\n        this.setState({\n            value: result,\n            numbers: newNumbers,\n            operations:[],\n            isOperation: false,\n        });\n    }\n\n    handleClick(value){\n        if(value.includes(resetChar)){\n            this.setState({\n                value: \"\",\n                numbers: [],\n                operations: [],\n                isOperation: false,\n            });\n        }\n        else if(value.includes(equalityChar)){\n            this.calculateResult();\n        }\n        \n\n        if(!value.includes(equalityChar) && !value.includes(resetChar)){        \n            this.setState({\n                value: String(this.state.value).concat(value),\n            });\n\n            this.storeInput(value);\n        }        \n    }\n\n    handleChange(event){\n        const userInput = event.target.value;\n        if(!userInput.includes(equalityChar)){        \n            this.setState({\n                value: userInput,\n            });\n\n            const lastValue = userInput.charAt(userInput.length - 1);\n            this.storeInput(lastValue);    \n        }   \n    }\n\n    handleSumbit(event){\n        event.preventDefault();\n\n        this.calculateResult();\n    }\n\n    renderKey(value, className){\n        return(\n            <Key value={value} className={className} onClick={() => this.handleClick(value)}/>\n        );\n    }\n\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.handleSumbit}>\n                    <input type=\"text\" className=\"inputBox\" value={this.state.value} onChange={this.handleChange}/>\n                </form>\n                <div className=\"calc-row\">\n                    {this.renderKey(\"AC\", \"top-key\")}\n                    {this.renderKey(\"%\", \"top-key\")}\n                    {this.renderKey(\"/\", \"top-key\")}\n                    {this.renderKey(\"*\", \"ops-key\")}\n                </div>\n                <div className=\"calc-row\">\n                    {this.renderKey(\"7\", \"key\")}\n                    {this.renderKey(\"8\", \"key\")}\n                    {this.renderKey(\"9\", \"key\")}\n                    {this.renderKey(\"-\", \"ops-key\")}\n                </div>\n                <div className=\"calc-row\">\n                    {this.renderKey(\"4\", \"key\")}\n                    {this.renderKey(\"5\", \"key\")}\n                    {this.renderKey(\"6\", \"key\")}\n                    {this.renderKey(\"+\", \"ops-key\")}\n                </div>\n                <div className=\"calc-row\">\n                    {this.renderKey(\"1\", \"key\")}\n                    {this.renderKey(\"2\", \"key\")}\n                    {this.renderKey(\"3\", \"key\")}\n                    {this.renderKey(\".\", \"ops-key\")}\n                </div>\n                <div className=\"calc-row\">\n                    {this.renderKey(\"0\", \"zero-key\")}\n                    {this.renderKey(\"=\", \"ops-key\")}\n                </div>   \n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Calculator />, \n    document.getElementById('root'));\n"],"sourceRoot":""}